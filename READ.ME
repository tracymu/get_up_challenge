Pseudo Code Help
----------------

 function MoveKnight(current_position, target, prior_moves) 
{
  # stop recursion and return empty if gone too deep (too many moves)

  foreach(move in PossibleMoves(current_position)) 
  {
    if (move == target) 
    {
      #   handle reaching the destination 
    }
    elsif !prior_moves.include?(move)
    {
       # call MoveKnight recursively  
    }
  }


Output:

The output would need to look something like this
['a2-a1-a3-a2', 'd2-e3-a2-a8','and more strings', 'and more strings']


Moveknight method:
current_position = current square
target = end square
prior_moves = in this path?
so prior_moves is building up one of the strings.


But the first time you had run the move_knight method, you would already need a 'prior moves' to pass in.


Questions
---------


API Input: It's a get request expecting 2 parameters? and you just write the parameters in the URL -> is that right?

This main.rb file - more things need to be moved out into their own classes?

Methods are too long.

I probably made it too complicated by making chess names in the game. 
Maybe should have just had a chess name interpreter from input...?

The x_moves, y_moves array -> there is definitely going to be a better way to do this

Testing: proper testing? e.g. with minitest? Or just tests to run examples?






## How to Run
---------------

In terminal you can run this using 
$ ruby main.rb

You can also see it on Heroku at 
http://shielded-retreat-1048.herokuapp.com/

##Checklist & Notes
-------------------

x Have the proper notation for squares  - done
x RESTful API - RESTful yes, API not really.
x Responds with JSON - done
x Response is array of paths - done
x Squares separated by '-' done
x No repeats in any series of moves - attempted
x Order paths from shortest to longest - done
x Ignore any paths longer than 6 squares - attempted
x Empty array if no path less than 6 squares - attempted
x Some response code if bad input format - done
- Include tests - included minitest, didn't write tests
x Make it easy to run
x Push to Heroku (if possible)
x Include in the ReadMe how to run it


##Given Question:
---------

A Knight’s API

Givens

- Standard 8x8 chessboard, and this simple notation for squares:

http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/SCD_algebraic_notation.svg/242px-SCD_algebraic_notation.svg.png

- Standard rules of movement for the Knight piece as outlined on Wikipedia:

http://en.wikipedia.org/wiki/Knight_(chess)#Movement

The Challenge

Write a simple restful API (ie, think about status codes and verbs), which responds with JSON when provided with a starting position and ending position as parameters on the request (eg, start=a1 and end=d4).

The response should be one of:

a) an array of possible series of moves for a knight to get from start to end square, eg,

[‘a1-b3-d4’, ‘a1-c2-b4’, ...]

NOTE:

Each square the knight travels should be listed with dashes between. There should be no looping paths with the same square repeated again in the same series of moves. The paths should be in order from shortest to longest. Ignore any paths which are longer than 6 squares, including the start and end square.

b) An empty array if there is no path within 6 squares.

c) An appropriate status code and response message in case of bad data / format.

Examples

The below examples use a short format of: start square, end square => result. Your solution will use request parameters for the request, and JSON for the result.

a1, a1 => bad request as any path will have a1 repeated

a1, h1 => [] (empty as can’t do in move limit)

a1, d4 => [a1-b3-d4, a1-c2-d4, a1-c2-e3-f5-d4, a1-c2-a3-b5-d4, a1-c2-b4-c6-d4, a1-c2-e1-f3-d4, a1-b3-d2-f3-d4, a1-b3-c1-e2-d4, a1-b3-a5-c6-d4, a1-b3-c5-e6-d4]


Guidelines

- Simple neat solutions, with clear naming and tests are prefered.

- API and tests should be written in Ruby, and easy to set up and run with appropriate Ruby version (and gems if required)

- Don’t worry about performance

- Bonus points for putting your solution up on Heroku or similar service
- If you’re unsure of anything or are feeling stuck, please ask.

